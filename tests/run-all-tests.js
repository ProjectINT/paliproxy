#!/usr/bin/env node

/**
 * –£–ø—Ä–∞–≤–ª—è—é—â–∏–π —Ñ–∞–π–ª –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ proxy-connection
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç—ã –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ –∏ –≤—ã–≤–æ–¥–∏—Ç –æ–±—â–∏–π –æ—Ç—á–µ—Ç
 */

const { execSync } = require('child_process');
const fs = require('fs');
const path = require('path');

// –¶–≤–µ—Ç–∞ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
const colors = {
  reset: '\x1b[0m',
  bright: '\x1b[1m',
  green: '\x1b[32m',
  red: '\x1b[31m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  cyan: '\x1b[36m'
};

// –°–ø–∏—Å–æ–∫ —Ç–µ—Å—Ç–æ–≤ –¥–ª—è –∑–∞–ø—É—Å–∫–∞
const tests = [
  {
    name: '–ë–∞–∑–æ–≤—ã–π —Ç–µ—Å—Ç –ø—Ä–æ–∫—Å–∏',
    file: 'proxy-basic-test.js',
    description: '–û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ ProxyManager'
  },
  {
    name: '–û—Ç–ª–∞–¥–æ—á–Ω—ã–π —Ç–µ—Å—Ç –ø—Ä–æ–∫—Å–∏',
    file: 'proxy-debug-test.js',
    description: '–î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç–ª–∞–¥–æ—á–Ω—ã–π —Ç–µ—Å—Ç —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º'
  },
  {
    name: '–¢–µ—Å—Ç –æ—Ç–∫–∞–∑–æ—É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏',
    file: 'proxy-failover-test.js',
    description: '–¢–µ—Å—Ç –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –º–µ–∂–¥—É –ø—Ä–æ–∫—Å–∏ –ø—Ä–∏ —Å–±–æ—è—Ö'
  },
  {
    name: '–¢–µ—Å—Ç –æ—Ç–∫–∞–∑–æ—É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏ —Å –ø–∞—Ä–æ–ª–µ–º',
    file: 'proxy-failover-password-test.js',
    description: '–¢–µ—Å—Ç –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–æ–∫—Å–∏ —Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π'
  },
  {
    name: '–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –ø—Ä–æ–∫—Å–∏',
    file: 'health-check-test.js',
    description: '–¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–æ–∫—Å–∏'
  },
  {
    name: '–¢–µ—Å—Ç API –∑–∞–ø—Ä–æ—Å–æ–≤',
    file: 'request-api-test.js',
    description: '–¢–µ—Å—Ç fetch-like API –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞–ø—Ä–æ—Å–∞–º–∏'
  },
  {
    name: '–ë—ã—Å—Ç—Ä—ã–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç',
    file: 'quick-integration-test.js',
    description: '–ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤'
  },
  {
    name: '–¢–µ—Å—Ç –ø–∞–∫–µ—Ç–∞',
    file: 'test-package.js',
    description: '–¢–µ—Å—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ npm –ø–∞–∫–µ—Ç–∞'
  },
  {
    name: '–¢–µ—Å—Ç TTS ReadableStream',
    file: 'tts-readablestream-test.js',
    description: '–¢–µ—Å—Ç —Ä–∞–±–æ—Ç—ã —Å –ø–æ—Ç–æ–∫–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏'
  }
];

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –ª–æ–≥–æ–≤
function cleanLogs() {
  const logsDir = path.join(__dirname, '..', 'logs');
  if (!fs.existsSync(logsDir)) {
    fs.mkdirSync(logsDir, { recursive: true });
  }

  const logFiles = fs.readdirSync(logsDir).filter(file => file.endsWith('.log'));
  logFiles.forEach(file => {
    const filePath = path.join(logsDir, file);
    try {
      fs.unlinkSync(filePath);
      console.log(`${colors.yellow}üóëÔ∏è  –û—á–∏—â–µ–Ω –ª–æ–≥: ${file}${colors.reset}`);
    } catch (err) {
      console.log(`${colors.red}‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ª–æ–≥ ${file}: ${err.message}${colors.reset}`);
    }
  });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞
function runTest(test) {
  const testPath = path.join(__dirname, test.file);

  if (!fs.existsSync(testPath)) {
    console.log(`${colors.red}‚ùå –¢–µ—Å—Ç —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${test.file}${colors.reset}`);
    return { success: false, error: '–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω' };
  }

  console.log(`\n${colors.cyan}üìã ${test.name}${colors.reset}`);
  console.log(`${colors.blue}   ${test.description}${colors.reset}`);
  console.log(`${colors.yellow}üîß –ó–∞–ø—É—Å–∫: ${test.file}${colors.reset}`);

  try {
    const startTime = Date.now();
    execSync(`node "${testPath}"`, {
      stdio: 'inherit',
      cwd: path.join(__dirname, '..')
    });
    const duration = Date.now() - startTime;

    console.log(`${colors.green}‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ (${duration}ms)${colors.reset}`);
    return { success: true, duration };
  } catch (error) {
    console.log(`${colors.red}‚ùå –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π${colors.reset}`);
    return { success: false, error: error.message };
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
function main() {
  console.log(`${colors.bright}${colors.cyan}`);
  console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
  console.log('üöÄ –ó–ê–ü–£–°–ö –í–°–ï–• –¢–ï–°–¢–û–í PROXY-CONNECTION');
  console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
  console.log(`${colors.reset}`);

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
  console.log(`${colors.yellow}üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è...${colors.reset}`);
  const requiredEnvVars = ['PROXY_LIST_PATH', 'TEST_URLS'];
  const missingVars = requiredEnvVars.filter(varName => !process.env[varName]);

  if (missingVars.length > 0) {
    console.log(`${colors.red}‚ö†Ô∏è  –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: ${missingVars.join(', ')}${colors.reset}`);
    console.log(`${colors.yellow}üí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã —Å–æ–∑–¥–∞–ª–∏ .env —Ñ–∞–π–ª —Å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–º–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏${colors.reset}`);
    console.log(`${colors.blue}üìñ –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –≤ README.md${colors.reset}`);
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–∫—Å–∏
  const proxyListPath = path.join(__dirname, '..', 'proxies-list.js');
  if (!fs.existsSync(proxyListPath)) {
    console.log(`${colors.red}‚ö†Ô∏è  –§–∞–π–ª —Å–æ —Å–ø–∏—Å–∫–æ–º –ø—Ä–æ–∫—Å–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: proxies-list.js${colors.reset}`);
    console.log(`${colors.yellow}üí° –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª —Å —Ä–∞–±–æ—á–∏–º–∏ –ø—Ä–æ–∫—Å–∏ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Ç–µ—Å—Ç–æ–≤${colors.reset}`);
  }

  console.log(`${colors.green}‚úÖ –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞${colors.reset}\n`);

  // –û—á–∏—Å—Ç–∫–∞ –ª–æ–≥–æ–≤
  console.log(`${colors.yellow}üßπ –û—á–∏—Å—Ç–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –ª–æ–≥–æ–≤...${colors.reset}`);
  cleanLogs();    // –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
  const results = [];
  const startTime = Date.now();

  for (const test of tests) {
    const result = runTest(test);
    results.push({ test, result });

    // –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏
    if (test !== tests[tests.length - 1]) {
      console.log(`${colors.blue}‚è∏Ô∏è  –ü–∞—É–∑–∞ 2 —Å–µ–∫—É–Ω–¥—ã...${colors.reset}`);
      execSync('sleep 2');
    }
  }

  // –û—Ç—á–µ—Ç –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö
  const overallDuration = Date.now() - startTime;
  const successCount = results.filter(r => r.result.success).length;
  const failCount = results.length - successCount;

  console.log(`\n${colors.bright}${colors.cyan}`);
  console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
  console.log('üìä –û–¢–ß–ï–¢ –û –†–ï–ó–£–õ–¨–¢–ê–¢–ê–• –¢–ï–°–¢–û–í');
  console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
  console.log(`${colors.reset}`);

  console.log(`${colors.green}‚úÖ –£—Å–ø–µ—à–Ω–æ: ${successCount}${colors.reset}`);
  console.log(`${colors.red}‚ùå –ù–µ—É–¥–∞—á–Ω–æ: ${failCount}${colors.reset}`);
  console.log(`${colors.blue}‚è±Ô∏è  –û–±—â–µ–µ –≤—Ä–µ–º—è: ${overallDuration}ms${colors.reset}`);

  console.log(`\n${colors.cyan}üìã –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:${colors.reset}`);
  results.forEach(({ test, result }) => {
    const status = result.success ?
      `${colors.green}‚úÖ –£–°–ü–ï–•${colors.reset}` :
      `${colors.red}‚ùå –û–®–ò–ë–ö–ê${colors.reset}`;
    const duration = result.duration ? ` (${result.duration}ms)` : '';

    console.log(`   ${status} ${test.name}${duration}`);
    if (!result.success && result.error) {
      console.log(`     ${colors.red}‚îî‚îÄ ${result.error}${colors.reset}`);
    }
  });

  console.log(`\n${colors.yellow}üìÇ –õ–æ–≥–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ø–∞–ø–∫–µ logs/${colors.reset}`);

  // –ö–æ–¥ –≤—ã—Ö–æ–¥–∞
  const exitCode = failCount > 0 ? 1 : 0;
  if (exitCode === 0) {
    console.log(`\n${colors.green}üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!${colors.reset}`);
  } else {
    console.log(`\n${colors.red}üí• –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å —Å –æ—à–∏–±–∫–∞–º–∏${colors.reset}`);
  }

  process.exit(exitCode);
}

// –ó–∞–ø—É—Å–∫ –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  main();
}

module.exports = { main, runTest, cleanLogs };
