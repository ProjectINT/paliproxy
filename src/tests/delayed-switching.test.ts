/**
 * –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–≥–æ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤
 */

import { ChannelSwitchManager } from '../channelSwitchManager';
import { VPNManager } from '../manager';
import { 
    DelayedSwitchConfig,
    VPNConfig,
    AppConfig
} from '../types';
import { logger } from '../utils';

// –¢–µ—Å—Ç–æ–≤—ã–µ VPN –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
const testVPNs: VPNConfig[] = [
    {
        name: 'test-primary',
        config: './test/primary.ovpn',
        priority: 1,
        active: true,
        type: 'openvpn'
    },
    {
        name: 'test-backup',
        config: './test/backup.ovpn',
        priority: 2,
        active: false,
        type: 'openvpn'
    }
];

// –¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–≥–æ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è
const testDelayedSwitchConfig: DelayedSwitchConfig = {
    enabled: true,
    maxDelayMs: 30000,
    criticalityThresholds: {
        immediate: 90,
        fast: 70,
        normal: 50,
        slow: 30
    },
    gracePeriodMs: 5000
};

// –¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
const testAppConfig: AppConfig & { delayedSwitch: DelayedSwitchConfig } = {
    vpnConfigsPath: './test',
    defaultVpnTimeout: 10000,
    maxReconnectAttempts: 2,
    healthCheckInterval: 10000,
    healthCheckUrl: 'https://httpbin.org/ip',
    healthCheckTimeout: 5000,
    httpTimeout: 10000,
    userAgent: 'PaliVPN-Test/1.0',
    logLevel: 'info',
    nodeEnv: 'test',
    delayedSwitch: testDelayedSwitchConfig,
    vpnConfigs: testVPNs
};

/**
 * –¢–µ—Å—Ç 1: –ë–∞–∑–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å ChannelSwitchManager
 */
async function testChannelSwitchManagerBasics(): Promise<void> {
    logger.info('üß™ Test 1: ChannelSwitchManager Basic Functionality');
    
    const switchManager = new ChannelSwitchManager(testDelayedSwitchConfig);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    console.assert(switchManager.isEnabled === true, 'Switch manager should be enabled');
    console.assert(switchManager.pendingSwitches.length === 0, 'Should have no pending switches initially');
    console.assert(switchManager.activeOperations.length === 0, 'Should have no active operations initially');
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –æ–ø–µ—Ä–∞—Ü–∏–∏
    const operationId = switchManager.registerOperation({
        type: 'http_request',
        criticalityLevel: 60,
        startedAt: Date.now(),
        estimatedDuration: 5000,
        canInterrupt: true
    });
    
    console.assert(typeof operationId === 'string', 'Operation ID should be a string');
    console.assert(switchManager.activeOperations.length === 1, 'Should have one active operation');
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è
    const switchId = await switchManager.requestSwitch(
        testVPNs[1]!,
        'user_request',
        'normal',
        60
    );
    
    console.assert(typeof switchId === 'string', 'Switch ID should be a string');
    
    // –ó–∞–≤–µ—Ä—à–∞–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é
    switchManager.completeOperation(operationId);
    console.assert(switchManager.activeOperations.length === 0, 'Should have no active operations after completion');
    
    logger.info('‚úÖ ChannelSwitchManager basic functionality test passed');
}

/**
 * –¢–µ—Å—Ç 2: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å VPNManager
 */
async function testVPNManagerIntegration(): Promise<void> {
    logger.info('üß™ Test 2: VPNManager Integration');
    
    const manager = new VPNManager(testAppConfig);
    
    try {
        await manager.initialize();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–æ
        const status = manager.getDelayedSwitchStatus();
        console.assert(status.isEnabled === true, 'Delayed switching should be enabled');
        
        // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é
        const operationId = await manager.registerOperation({
            type: 'file_transfer',
            criticalityLevel: 75,
            estimatedDuration: 3000,
            canInterrupt: false
        });
        
        console.assert(typeof operationId === 'string', 'Operation ID should be a string');
        
        // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ
        const switchId = await manager.requestDelayedSwitch(
            testVPNs[1]!,
            'optimization',
            'low',
            40
        );
        
        console.assert(typeof switchId === 'string', 'Switch ID should be a string');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
        const statusAfterRequest = manager.getDelayedSwitchStatus();
        console.assert(statusAfterRequest.pendingSwitches.length > 0, 'Should have pending switches');
        console.assert(statusAfterRequest.activeOperations.length > 0, 'Should have active operations');
        
        // –û—Ç–º–µ–Ω—è–µ–º –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ
        const cancelled = await manager.cancelDelayedSwitch(switchId);
        console.assert(cancelled === true, 'Switch should be cancellable');
        
        // –ó–∞–≤–µ—Ä—à–∞–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é
        await manager.completeOperation(operationId);
        
        const finalStatus = manager.getDelayedSwitchStatus();
        console.assert(finalStatus.activeOperations.length === 0, 'Should have no active operations after completion');
        
        logger.info('‚úÖ VPNManager integration test passed');
        
    } finally {
        await manager.stop();
    }
}

/**
 * –¢–µ—Å—Ç 3: –†–∞–∑–ª–∏—á–Ω—ã–µ —É—Ä–æ–≤–Ω–∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
 */
async function testPriorityLevels(): Promise<void> {
    logger.info('üß™ Test 3: Priority Levels');
    
    const switchManager = new ChannelSwitchManager(testDelayedSwitchConfig);
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–µ—à–µ–Ω–∏—è –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç–∏
    
    // –ù–∏–∑–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç - –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç–ª–æ–∂–µ–Ω
    const lowPriorityDecision = switchManager.getSwitchDecision(
        testVPNs[1]!,
        'optimization',
        'low'
    );
    console.assert(lowPriorityDecision.action === 'delayed', 'Low priority should be delayed');
    console.assert(lowPriorityDecision.delayMs > 0, 'Should have delay for low priority');
    
    // –í—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç - –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±—ã—Å—Ç—Ä—ã–º
    const highPriorityDecision = switchManager.getSwitchDecision(
        testVPNs[1]!,
        'user_request',
        'high'
    );
    console.assert(['immediate', 'delayed'].includes(highPriorityDecision.action), 'High priority should be immediate or delayed');
    
    // –≠–∫—Å—Ç—Ä–µ–Ω–Ω—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç - –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ–º–µ–¥–ª–µ–Ω–Ω—ã–º
    const emergencyDecision = switchManager.getSwitchDecision(
        testVPNs[1]!,
        'emergency',
        'emergency'
    );
    console.assert(emergencyDecision.action === 'immediate', 'Emergency should be immediate');
    console.assert(emergencyDecision.delayMs === 0, 'Emergency should have no delay');
    
    logger.info('‚úÖ Priority levels test passed');
}

/**
 * –¢–µ—Å—Ç 4: –ö—Ä–∏—Ç–∏—á–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
 */
async function testCriticalOperations(): Promise<void> {
    logger.info('üß™ Test 4: Critical Operations');
    
    const switchManager = new ChannelSwitchManager(testDelayedSwitchConfig);
    
    // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫—Ä–∏—Ç–∏—á–Ω—É—é –æ–ø–µ—Ä–∞—Ü–∏—é
    const criticalOp = switchManager.registerOperation({
        type: 'file_transfer',
        criticalityLevel: 90,
        startedAt: Date.now(),
        estimatedDuration: 10000,
        canInterrupt: false
    });
    
    // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–æ –≤—Ä–µ–º—è –∫—Ä–∏—Ç–∏—á–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏
    const switchId = await switchManager.requestSwitch(
        testVPNs[1]!,
        'user_request',
        'normal',
        60
    );
    
    const decision = switchManager.getSwitchDecision(
        testVPNs[1]!,
        'user_request',
        'normal'
    );
    
    // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç–ª–æ–∂–µ–Ω–æ –∏–∑-–∑–∞ –∫—Ä–∏—Ç–∏—á–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏
    console.assert(decision.action === 'delayed', 'Switch should be delayed due to critical operation');
    
    // –ó–∞–≤–µ—Ä—à–∞–µ–º –∫—Ä–∏—Ç–∏—á–Ω—É—é –æ–ø–µ—Ä–∞—Ü–∏—é
    switchManager.completeOperation(criticalOp);
    
    // –¢–µ–ø–µ—Ä—å –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–ª–∏–∑–∫–æ –∫ —Ç–µ–∫—É—â–µ–º—É –≤—Ä–µ–º–µ–Ω–∏
    const optimalTime = switchManager.getOptimalSwitchTime();
    const now = Date.now();
    console.assert(Math.abs(optimalTime - now) < 5000, 'Optimal switch time should be soon after completing critical operation');
    
    logger.info('‚úÖ Critical operations test passed');
}

/**
 * –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
 */
async function runAllTests(): Promise<void> {
    logger.info('üß™ Starting Delayed Switching Tests...\n');
    
    try {
        await testChannelSwitchManagerBasics();
        await testVPNManagerIntegration();
        await testPriorityLevels();
        await testCriticalOperations();
        
        logger.info('\n‚úÖ All tests passed successfully!');
    } catch (error) {
        logger.error('\n‚ùå Test failed:', error);
        throw error;
    }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤, –µ—Å–ª–∏ —Å–∫—Ä–∏–ø—Ç –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
    runAllTests().catch(error => {
        logger.error('Fatal error in tests:', error);
        process.exit(1);
    });
}

export { runAllTests };
