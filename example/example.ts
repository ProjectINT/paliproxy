import { VPNManager } from '../src/manager';
import { VPNRequester } from '../src/requester';
import configManager from '../src/config';
import { logger, delay } from '../src/utils';
import { VPNConfig, ConnectivityResult, BatchRequestResult } from '../src/types';

/**
 * –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è PaliVPN –∫–ª–∏–µ–Ω—Ç–∞
 * –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
 */
async function main(): Promise<void> {
    try {
        logger.info('PaliVPN Example - Starting...');
        
        // 1. –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        const vpnConfig = configManager.get();
        logger.info('Configuration loaded:', {
            healthCheckInterval: vpnConfig.healthCheckInterval,
            httpTimeout: vpnConfig.httpTimeout,
            logLevel: vpnConfig.logLevel
        });
        
        // 2. –°–æ–∑–¥–∞–µ–º –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º VPN Manager
        const vpnManager = new VPNManager(vpnConfig);
        await vpnManager.initialize();
        
        // 3. –°–æ–∑–¥–∞–µ–º HTTP requester –¥–ª—è —Ä–∞–±–æ—Ç—ã —á–µ—Ä–µ–∑ VPN
        const requester = new VPNRequester(vpnConfig, vpnManager);
        
        // 4. –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è VPN Manager
        vpnManager.on('connected', (vpn: VPNConfig) => {
            logger.info(`‚úÖ Connected to VPN: ${vpn.name}`);
        });
        
        vpnManager.on('disconnected', (vpn: VPNConfig) => {
            logger.info(`‚ùå Disconnected from VPN: ${vpn.name}`);
        });
        
        vpnManager.on('switched', (vpn: VPNConfig) => {
            logger.info(`üîÑ Switched to VPN: ${vpn.name}`);
        });
        
        // 5. –ó–∞–ø—É—Å–∫–∞–µ–º VPN Manager
        await vpnManager.start();
        
        // 6. –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ HTTP requester
        await demonstrateHTTPRequests(requester);
        
        // 7. –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –∑–¥–æ—Ä–æ–≤—å—è VPN
        await demonstrateHealthCheck(vpnManager);
        
        // 8. –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º batch –∑–∞–ø—Ä–æ—Å—ã
        await demonstrateBatchRequests(requester);
        
        // 9. –ñ–¥–µ–º –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        logger.info('Monitoring VPN for 30 seconds...');
        await delay(30000);
        
        // 10. –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É
        logger.info('Shutting down...');
        await vpnManager.stop();
        
        logger.info('‚úÖ Example completed successfully');
        
    } catch (error) {
        logger.error('‚ùå Example failed:', (error as Error).message);
        process.exit(1);
    }
}

/**
 * –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è HTTP –∑–∞–ø—Ä–æ—Å–æ–≤ —á–µ—Ä–µ–∑ VPN
 */
async function demonstrateHTTPRequests(requester: VPNRequester): Promise<void> {
    logger.info('\n--- HTTP Requests Demo ---');
    
    try {
        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π IP
        const currentIP = await requester.getCurrentIP();
        logger.info(`Current IP through VPN: ${currentIP}`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–≤—è–∑–Ω–æ—Å—Ç—å
        const connectivity: ConnectivityResult = await requester.checkConnectivity();
        logger.info('Connectivity check:', connectivity);
        
        // –í—ã–ø–æ–ª–Ω—è–µ–º GET –∑–∞–ø—Ä–æ—Å
        const response = await requester.get('https://httpbin.org/user-agent');
        const userData = await response.json();
        logger.info('User-Agent response:', userData);
        
        // –í—ã–ø–æ–ª–Ω—è–µ–º POST –∑–∞–ø—Ä–æ—Å
        const postData = { message: 'Hello from PaliVPN!', timestamp: Date.now() };
        const postResponse = await requester.post('https://httpbin.org/post', postData);
        const _postResult = await postResponse.json();
        logger.info('POST response received, data echoed correctly');
        
    } catch (error) {
        logger.error('HTTP requests demo failed:', (error as Error).message);
    }
}

/**
 * –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è VPN
 */
async function demonstrateHealthCheck(vpnManager: VPNManager): Promise<void> {
    logger.info('\n--- Health Check Demo ---');
    
    try {
        const status = vpnManager.getStatus();
        logger.info('VPN Manager Status:', {
            isRunning: status.isRunning,
            currentVPN: status.currentVPN?.name,
            vpnCount: status.vpnList.length
        });
        
        // –ü–æ–ª—É—á–∞–µ–º health checker –∏–∑ manager
        const healthChecker = vpnManager.healthChecker;
        const healthStatus = healthChecker.getStatus();
        
        logger.info('Health Checker Status:', healthStatus);
        
        // –í—ã–ø–æ–ª–Ω—è–µ–º —Ä–∞–∑–æ–≤—É—é –ø—Ä–æ–≤–µ—Ä–∫—É —Ç–µ–∫—É—â–µ–≥–æ VPN
        if (status.currentVPN) {
            const healthResult = await healthChecker.checkOnce(status.currentVPN);
            logger.info(`Health check result for ${status.currentVPN.name}:`, {
                isHealthy: healthResult.isHealthy,
                reason: healthResult.reason,
                successfulChecks: healthResult.successfulChecks,
                failedChecks: healthResult.failedChecks
            });
        }
        
    } catch (error) {
        logger.error('Health check demo failed:', (error as Error).message);
    }
}

/**
 * –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è batch –∑–∞–ø—Ä–æ—Å–æ–≤
 */
async function demonstrateBatchRequests(requester: VPNRequester): Promise<void> {
    logger.info('\n--- Batch Requests Demo ---');
    
    try {
        // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–ø—Ä–æ—Å–æ–≤
        const requests = [
            { method: 'GET' as const, url: 'https://httpbin.org/delay/1' },
            { method: 'GET' as const, url: 'https://httpbin.org/status/200' },
            { method: 'GET' as const, url: 'https://httpbin.org/json' },
            { method: 'POST' as const, url: 'https://httpbin.org/post', body: { test: true } },
            { method: 'GET' as const, url: 'https://httpbin.org/headers' }
        ];
        
        logger.info(`Executing ${requests.length} requests in batches...`);
        
        const startTime = Date.now();
        const results: BatchRequestResult[] = await requester.batchRequests(requests, 3); // 3 concurrent requests
        const duration = Date.now() - startTime;
        
        const successful = results.filter(r => r.success).length;
        const failed = results.length - successful;
        
        logger.info(`Batch requests completed in ${duration}ms:`);
        logger.info(`‚úÖ Successful: ${successful}, ‚ùå Failed: ${failed}`);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ –Ω–µ—É–¥–∞—á–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        results.forEach((result, index) => {
            if (!result.success) {
                logger.warn(`Request ${index + 1} failed:`, result.error);
            }
        });
        
    } catch (error) {
        logger.error('Batch requests demo failed:', (error as Error).message);
    }
}

/**
 * –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è VPN
 */
async function demonstrateErrorHandling(requester: VPNRequester): Promise<void> {
    logger.info('\n--- Error Handling Demo ---');
    
    try {
        // –ü—ã—Ç–∞–µ–º—Å—è —Å–¥–µ–ª–∞—Ç—å –∑–∞–ø—Ä–æ—Å –∫ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É URL
        logger.info('Testing error handling with invalid URL...');
        
        try {
            await requester.get('https://this-domain-does-not-exist-12345.com');
        } catch (error) {
            logger.info(`Expected error caught: ${(error as Error).message}`);
        }
        
        // –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å —Å VPN fallback
        logger.info('Testing VPN fallback mechanism...');
        
        const _fallbackResult = await requester.requestWithVPNFallback({
            method: 'GET',
            url: 'https://httpbin.org/status/200'
        });
        
        logger.info('VPN fallback request successful');
        
    } catch (error) {
        logger.error('Error handling demo failed:', (error as Error).message);
    }
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
 */
function setupSignalHandlers(): void {
    process.on('SIGINT', () => {
        logger.info('Received SIGINT, shutting down gracefully...');
        process.exit(0);
    });
    
    process.on('SIGTERM', () => {
        logger.info('Received SIGTERM, shutting down gracefully...');
        process.exit(0);
    });
    
    process.on('unhandledRejection', (reason, promise) => {
        logger.error('Unhandled Rejection at:', promise, 'reason:', reason);
        process.exit(1);
    });
    
    process.on('uncaughtException', (error) => {
        logger.error('Uncaught Exception:', error);
        process.exit(1);
    });
}

// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
setupSignalHandlers();

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–º–µ—Ä —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –æ—Å–Ω–æ–≤–Ω–æ–π –º–æ–¥—É–ª—å
if (require.main === module) {
    main().catch(error => {
        logger.error('Unhandled error in main:', error);
        process.exit(1);
    });
}

export {
    main,
    demonstrateHTTPRequests,
    demonstrateHealthCheck,
    demonstrateBatchRequests,
    demonstrateErrorHandling
};
