#!/usr/bin/env node

import { PaliVPN } from '../src/index';
import { VPNConfig } from '../src/types';
import { logger, delay } from '../src/utils';

/**
 * –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –±—É—Ñ–µ—Ä–∏–∑–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
 * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç, –∫–∞–∫ –∑–∞–ø—Ä–æ—Å—ã –±—É—Ñ–µ—Ä–∏–∑—É—é—Ç—Å—è –≤–æ –≤—Ä–µ–º—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è VPN
 */

async function demonstrateBuffering(): Promise<void> {
    // –°–æ–∑–¥–∞–µ–º VPN –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    const vpnConfigs: VPNConfig[] = [
        {
            name: 'primary-vpn',
            config: 'mock-config-1',
            priority: 1,
            active: false,
            type: 'openvpn'
        },
        {
            name: 'backup-vpn',
            config: 'mock-config-2',
            priority: 2,
            active: false,
            type: 'wireguard'
        }
    ];

    const client = PaliVPN.withVPNConfigs(vpnConfigs);

    try {
        logger.info('üöÄ Starting PaliVPN buffering demo...');
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç
        await client.initialize();
        
        // –ü–æ–ª—É—á–∞–µ–º HTTP –∫–ª–∏–µ–Ω—Ç
        const requester = client.httpClient;
        
        logger.info('üìä Initial buffer status:');
        console.log(JSON.stringify(requester.getBufferStatus(), null, 2));
        
        // –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è 1: –û–±—ã—á–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã —Å –±—É—Ñ–µ—Ä–∏–∑–∞—Ü–∏–µ–π
        logger.info('\n--- Demo 1: Buffered Requests ---');
        
        const requests = [
            requester.get('https://httpbin.org/delay/1', {}, 'high'),
            requester.post('https://httpbin.org/post', { test: 'data' }, {}, 'normal'),
            requester.get('https://httpbin.org/json', {}, 'low'),
            requester.get('https://httpbin.org/status/200', {}, 'critical')
        ];
        
        logger.info('üîÑ Sending buffered requests...');
        const startTime = Date.now();
        
        try {
            const responses = await Promise.allSettled(requests);
            const successCount = responses.filter(r => r.status === 'fulfilled').length;
            const duration = Date.now() - startTime;
            
            logger.info(`‚úÖ Completed ${successCount}/${responses.length} requests in ${duration}ms`);
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±—É—Ñ–µ—Ä–∞
            logger.info('üìä Buffer statistics after processing:');
            console.log(JSON.stringify(requester.getBufferStatus(), null, 2));
            
        } catch (error) {
            logger.error('‚ùå Buffered requests failed:', (error as Error).message);
        }
        
        // –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è 2: –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ VPN –≤–æ –≤—Ä–µ–º—è –±—É—Ñ–µ—Ä–∏–∑–∞—Ü–∏–∏
        logger.info('\n--- Demo 2: VPN Switching with Buffering ---');
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–ø—Ä–æ—Å—ã –≤ —Ñ–æ–Ω–µ
        const backgroundRequests = [
            requester.requestWithBuffering({ url: 'https://httpbin.org/delay/2' }, 'normal'),
            requester.requestWithBuffering({ url: 'https://httpbin.org/delay/1' }, 'high'),
            requester.requestWithBuffering({ url: 'https://httpbin.org/json' }, 'critical')
        ];
        
        logger.info('üîÑ Starting background requests...');
        
        // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –∏ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º VPN
        await delay(500);
        
        logger.info('üîÑ Switching VPN during request processing...');
        try {
            const backupVPN = vpnConfigs[1];
            if (backupVPN) {
                await client.manager.switchVPN(backupVPN);
                logger.info('‚úÖ VPN switched successfully');
            }
        } catch {
            logger.warn('‚ö†Ô∏è VPN switch simulation (mock mode)');
        }
        
        // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        try {
            const bgResults = await Promise.allSettled(backgroundRequests);
            const bgSuccessCount = bgResults.filter(r => r.status === 'fulfilled').length;
            logger.info(`‚úÖ Background requests completed: ${bgSuccessCount}/${bgResults.length}`);
        } catch (error) {
            logger.error('‚ùå Background requests error:', (error as Error).message);
        }
        
        // –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è 3: –ü—Ä–∏–æ—Ä–∏—Ç–∏–∑–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤
        logger.info('\n--- Demo 3: Request Prioritization ---');
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å—ã —Å —Ä–∞–∑–Ω—ã–º–∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º–∏
        const priorityRequests = [
            { priority: 'low' as const, url: 'https://httpbin.org/delay/1' },
            { priority: 'critical' as const, url: 'https://httpbin.org/status/200' },
            { priority: 'normal' as const, url: 'https://httpbin.org/json' },
            { priority: 'high' as const, url: 'https://httpbin.org/headers' }
        ];
        
        logger.info('üéØ Sending requests with different priorities...');
        const priorityPromises = priorityRequests.map(req => 
            requester.requestWithBuffering({ url: req.url }, req.priority)
                .then(() => logger.info(`‚úÖ ${req.priority.toUpperCase()} priority request completed`))
                .catch(error => logger.error(`‚ùå ${req.priority.toUpperCase()} priority request failed:`, error.message))
        );
        
        await Promise.allSettled(priorityPromises);
        
        // –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        logger.info('\nüìä Final buffer statistics:');
        console.log(JSON.stringify(requester.getBufferStatus(), null, 2));
        
        // –û—á–∏—Å—Ç–∫–∞
        logger.info('\nüßπ Cleaning up...');
        requester.clearBuffer();
        
        logger.info('‚úÖ Buffering demo completed successfully!');
        
    } catch (error) {
        logger.error('‚ùå Demo failed:', (error as Error).message);
        throw error;
        
    } finally {
        try {
            await client.stop();
            logger.info('üõë Client stopped');
        } catch (error) {
            logger.error('Error stopping client:', error);
        }
    }
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
 */
function setupSignalHandlers(): void {
    process.on('SIGINT', () => {
        logger.info('Received SIGINT, shutting down gracefully...');
        process.exit(0);
    });
    
    process.on('SIGTERM', () => {
        logger.info('Received SIGTERM, shutting down gracefully...');
        process.exit(0);
    });
    
    process.on('unhandledRejection', (reason, promise) => {
        logger.error('Unhandled Rejection at:', promise, 'reason:', reason);
        process.exit(1);
    });
    
    process.on('uncaughtException', (error) => {
        logger.error('Uncaught Exception:', error);
        process.exit(1);
    });
}

// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
setupSignalHandlers();

// –ó–∞–ø—É—Å–∫–∞–µ–º –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—é
if (require.main === module) {
    demonstrateBuffering().catch(error => {
        logger.error('Unhandled error in buffering demo:', error);
        process.exit(1);
    });
}

export { demonstrateBuffering };
