#!/usr/bin/env node

import { PaliVPN } from '../src/index';
import { VPNConfig } from '../src/types';
import { logger, delay } from '../src/utils';

/**
 * –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞—â–∏—Ç—ã –æ—Ç race conditions
 * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç, –∫–∞–∫ –º—å—é—Ç–µ–∫—Å—ã –∏ —Å–µ–º–∞—Ñ–æ—Ä—ã –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞—é—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –≥–æ–Ω–∫–∏
 */

async function demonstrateRaceConditionProtection(): Promise<void> {
    // –°–æ–∑–¥–∞–µ–º VPN –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    const vpnConfigs: VPNConfig[] = [
        {
            name: 'vpn-alpha',
            config: 'mock-config-alpha',
            priority: 1,
            active: false,
            type: 'openvpn'
        },
        {
            name: 'vpn-beta',
            config: 'mock-config-beta',
            priority: 2,
            active: false,
            type: 'wireguard'
        },
        {
            name: 'vpn-gamma',
            config: 'mock-config-gamma',
            priority: 3,
            active: false,
            type: 'ikev2'
        }
    ];

    const client = PaliVPN.withVPNConfigs(vpnConfigs);

    try {
        logger.info('üöÄ Starting race condition protection demo...');
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç
        await client.initialize();
        
        const manager = client.manager;
        const requester = client.httpClient;
        
        // –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è 1: –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è VPN
        logger.info('\n--- Demo 1: Concurrent VPN Switching Protection ---');
        
        logger.info('üìä Initial concurrency status:');
        console.log(JSON.stringify(manager.getConcurrencyStatus(), null, 2));
        
        // –ü—ã—Ç–∞–µ–º—Å—è –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ —Ä–∞–∑–Ω—ã–µ VPN
        const switchPromises = [
            manager.switchVPN(vpnConfigs[0]!).catch(e => logger.warn('Switch 1 error:', e.message)),
            manager.switchVPN(vpnConfigs[1]!).catch(e => logger.warn('Switch 2 error:', e.message)),
            manager.switchVPN(vpnConfigs[2]!).catch(e => logger.warn('Switch 3 error:', e.message))
        ];
        
        logger.info('üîÑ Attempting concurrent VPN switches...');
        await Promise.allSettled(switchPromises);
        
        logger.info('‚úÖ VPN switching completed without race conditions');
        logger.info(`Current VPN: ${manager.currentVPN?.name || 'none'}`);
        
        // –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è 2: –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ HTTP –∑–∞–ø—Ä–æ—Å—ã —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º
        logger.info('\n--- Demo 2: Concurrent HTTP Requests with Semaphore ---');
        
        // –°–æ–∑–¥–∞–µ–º –º–Ω–æ–≥–æ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ (–±–æ–ª—å—à–µ —á–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–æ —Å–µ–º–∞—Ñ–æ—Ä–æ–º)
        const requestPromises = Array.from({ length: 15 }, (_, i) => 
            requester.get(`https://httpbin.org/delay/${Math.random() * 2}`, {})
                .then(() => logger.debug(`‚úÖ Request ${i + 1} completed`))
                .catch(e => logger.warn(`‚ùå Request ${i + 1} failed:`, e.message))
        );
        
        logger.info('üîÑ Starting 15 concurrent HTTP requests (max 10 allowed)...');
        const startTime = Date.now();
        
        await Promise.allSettled(requestPromises);
        const duration = Date.now() - startTime;
        
        logger.info(`‚úÖ All requests completed in ${duration}ms with concurrency control`);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ—Å–ª–µ –∑–∞–ø—Ä–æ—Å–æ–≤
        logger.info('üìä Requester status after concurrent requests:');
        console.log(JSON.stringify(requester.getStatus(), null, 2));
        
        // –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è 3: –û–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
        logger.info('\n--- Demo 3: Configuration Operations Protection ---');
        
        // –ü—ã—Ç–∞–µ–º—Å—è –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤–∞—Ç—å
        const configPromises = [
            manager.connectToBestVPN().catch(e => logger.warn('Connect best error:', e.message)),
            manager.stop().then(() => manager.start()).catch(e => logger.warn('Restart error:', e.message)),
            manager.switchVPN(vpnConfigs[1]!).catch(e => logger.warn('Switch during restart error:', e.message))
        ];
        
        logger.info('üîÑ Attempting concurrent configuration operations...');
        await Promise.allSettled(configPromises);
        
        logger.info('‚úÖ Configuration operations completed safely');
        
        // –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è 4: –°—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç —Å –±—ã—Å—Ç—Ä—ã–º–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è–º–∏
        logger.info('\n--- Demo 4: Rapid VPN Switching Stress Test ---');
        
        const rapidSwitches = [];
        for (let i = 0; i < 5; i++) {
            const targetVPN = vpnConfigs[i % vpnConfigs.length]!;
            rapidSwitches.push(
                manager.switchVPN(targetVPN)
                    .then(() => logger.debug(`‚úÖ Rapid switch ${i + 1} to ${targetVPN.name}`))
                    .catch(e => logger.warn(`‚ùå Rapid switch ${i + 1} failed:`, e.message))
            );
            
            // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏
            await delay(100);
        }
        
        logger.info('üîÑ Performing rapid VPN switches...');
        await Promise.allSettled(rapidSwitches);
        
        logger.info('‚úÖ Rapid switching stress test completed');
        logger.info(`Final VPN: ${manager.currentVPN?.name || 'none'}`);
        
        // –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        logger.info('\nüìä Final concurrency status:');
        const finalStatus = manager.getConcurrencyStatus();
        console.log(JSON.stringify(finalStatus, null, 2));
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –º—å—é—Ç–µ–∫—Å—ã –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω—ã
        const hasLockedMutexes = Object.values(finalStatus.mutexes).some(locked => locked);
        const hasQueuedOperations = Object.values(finalStatus.semaphores)
            .some(sem => sem.queue > 0) || finalStatus.locks.vpnList.readQueue > 0 || finalStatus.locks.vpnList.writeQueue > 0;
        
        if (!hasLockedMutexes && !hasQueuedOperations) {
            logger.info('‚úÖ All synchronization primitives are clean - no deadlocks detected');
        } else {
            logger.warn('‚ö†Ô∏è Some synchronization primitives are still active');
        }
        
        logger.info('‚úÖ Race condition protection demo completed successfully!');
        
    } catch (error) {
        logger.error('‚ùå Demo failed:', (error as Error).message);
        throw error;
        
    } finally {
        try {
            await client.stop();
            logger.info('üõë Client stopped');
        } catch (error) {
            logger.error('Error stopping client:', error);
        }
    }
}

/**
 * –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
 */
async function demonstrateSynchronizationPatterns(): Promise<void> {
    logger.info('\nüîÑ === Synchronization Patterns Demo ===');
    
    const { AsyncMutex, AsyncSemaphore, AsyncReadWriteLock } = await import('../src/concurrency');
    
    // –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –º—å—é—Ç–µ–∫—Å–∞
    logger.info('\n--- Mutex Pattern ---');
    const mutex = new AsyncMutex();
    
    const mutexTasks = Array.from({ length: 3 }, (_, i) => 
        mutex.runWithLock(async () => {
            logger.info(`üîí Task ${i + 1} acquired mutex`);
            await delay(1000);
            logger.info(`üîì Task ${i + 1} releasing mutex`);
        })
    );
    
    await Promise.all(mutexTasks);
    
    // –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–µ–º–∞—Ñ–æ—Ä–∞
    logger.info('\n--- Semaphore Pattern ---');
    const semaphore = new AsyncSemaphore(2); // –ú–∞–∫—Å–∏–º—É–º 2 –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
    
    const semaphoreTasks = Array.from({ length: 5 }, (_, i) => 
        semaphore.runWithPermit(async () => {
            logger.info(`üé´ Task ${i + 1} acquired permit (${semaphore.getAvailablePermits()} left)`);
            await delay(800);
            logger.info(`üé´ Task ${i + 1} releasing permit`);
        })
    );
    
    await Promise.all(semaphoreTasks);
    
    // –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è ReadWrite –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
    logger.info('\n--- ReadWrite Lock Pattern ---');
    const rwLock = new AsyncReadWriteLock();
    
    const rwTasks = [
        // –ß–∏—Ç–∞—Ç–µ–ª–∏
        ...Array.from({ length: 3 }, (_, i) => 
            rwLock.runWithReadLock(async () => {
                logger.info(`üìñ Reader ${i + 1} reading data`);
                await delay(500);
                logger.info(`üìñ Reader ${i + 1} finished reading`);
            })
        ),
        // –ü–∏—Å–∞—Ç–µ–ª—å
        rwLock.runWithWriteLock(async () => {
            logger.info(`‚úçÔ∏è Writer updating data`);
            await delay(1000);
            logger.info(`‚úçÔ∏è Writer finished updating`);
        }),
        // –ï—â–µ —á–∏—Ç–∞—Ç–µ–ª–∏
        ...Array.from({ length: 2 }, (_, i) => 
            rwLock.runWithReadLock(async () => {
                logger.info(`üìñ Reader ${i + 4} reading updated data`);
                await delay(300);
                logger.info(`üìñ Reader ${i + 4} finished reading`);
            })
        )
    ];
    
    await Promise.all(rwTasks);
    
    logger.info('‚úÖ Synchronization patterns demo completed!');
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
 */
function setupSignalHandlers(): void {
    process.on('SIGINT', () => {
        logger.info('Received SIGINT, shutting down gracefully...');
        process.exit(0);
    });
    
    process.on('SIGTERM', () => {
        logger.info('Received SIGTERM, shutting down gracefully...');
        process.exit(0);
    });
    
    process.on('unhandledRejection', (reason, promise) => {
        logger.error('Unhandled Rejection at:', promise, 'reason:', reason);
        process.exit(1);
    });
    
    process.on('uncaughtException', (error) => {
        logger.error('Uncaught Exception:', error);
        process.exit(1);
    });
}

// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
setupSignalHandlers();

// –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main(): Promise<void> {
    try {
        await demonstrateRaceConditionProtection();
        await demonstrateSynchronizationPatterns();
    } catch (error) {
        logger.error('Main demo error:', error);
        process.exit(1);
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—é
if (require.main === module) {
    main().catch(error => {
        logger.error('Unhandled error in race conditions demo:', error);
        process.exit(1);
    });
}

export { demonstrateRaceConditionProtection, demonstrateSynchronizationPatterns };
