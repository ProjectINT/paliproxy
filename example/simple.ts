#!/usr/bin/env node

/**
 * –ü—Ä–æ—Å—Ç–æ–π –ø—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è PaliVPN –∫–ª–∞—Å—Å–∞
 * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Ä–∞–±–æ—Ç—ã —Å VPN –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤
 */

import PaliVPN from '../src/index';

async function simpleExample() {
    console.log('üöÄ –ó–∞–ø—É—Å–∫ PaliVPN –ø—Ä–æ—Å—Ç–æ–≥–æ –ø—Ä–∏–º–µ—Ä–∞...\n');
    
    // –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∏–µ–Ω—Ç–∞
    const vpnClient = new PaliVPN();

    try {
        console.log('üì° –ü—Ä–æ–≤–µ—Ä–∫–∞ IP –∞–¥—Ä–µ—Å–∞ —á–µ—Ä–µ–∑ VPN...');
        
        // –ü—Ä–æ—Å—Ç–æ–π GET –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ IP
        const ipResponse = await vpnClient.request({
            url: 'https://httpbin.org/ip'
        });
        
        const ipData = await ipResponse.json() as { origin: string };
        console.log('‚úÖ –í–∞—à IP —á–µ—Ä–µ–∑ VPN:', ipData.origin);
        console.log('');

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
        console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ HTTP –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤...');
        const headersResponse = await vpnClient.request({
            url: 'https://httpbin.org/headers',
            headers: {
                'X-Custom-Header': 'PaliVPN-Test',
                'User-Agent': 'PaliVPN-Example/1.0'
            }
        });
        
        const headersData = await headersResponse.json() as { headers: Record<string, string> };
        console.log('‚úÖ –ó–∞–≥–æ–ª–æ–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞:', JSON.stringify(headersData.headers, null, 2));
        console.log('');

        // POST –∑–∞–ø—Ä–æ—Å —Å –¥–∞–Ω–Ω—ã–º–∏
        console.log('üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ POST –∑–∞–ø—Ä–æ—Å–∞...');
        const postResponse = await vpnClient.request({
            url: 'https://httpbin.org/post',
            method: 'POST',
            body: {
                message: '–ü—Ä–∏–≤–µ—Ç –æ—Ç PaliVPN!',
                timestamp: new Date().toISOString(),
                test: true
            },
            headers: {
                'Content-Type': 'application/json'
            }
        });
        
        const postData = await postResponse.json() as { json: any };
        console.log('‚úÖ –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ POST:', JSON.stringify(postData.json, null, 2));
        console.log('');

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ VPN
        console.log('üìä –°—Ç–∞—Ç—É—Å VPN —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è...');
        console.log('–ü–æ–¥–∫–ª—é—á–µ–Ω:', vpnClient.isConnected);
        console.log('–¢–µ–∫—É—â–∏–π VPN:', vpnClient.currentVPN?.name || '–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ VPN');
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞:', error);
    } finally {
        console.log('\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ VPN –∫–ª–∏–µ–Ω—Ç–∞...');
        await vpnClient.stop();
        console.log('‚úÖ VPN –∫–ª–∏–µ–Ω—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.');
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ —Ñ–∞–π–ª –∑–∞–ø—É—â–µ–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
    simpleExample().catch(error => {
        console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
        process.exit(1);
    });
}

export { simpleExample };
