/**
 * –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–≥–æ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤
 * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ–º VPN —Å —É—á–µ—Ç–æ–º –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç–∏ –æ–ø–µ—Ä–∞—Ü–∏–π
 */

import { VPNManager } from '../src/manager';
import { VPNRequester } from '../src/requester';
import { 
    AppConfig, 
    VPNConfig, 
    DelayedSwitchConfig,
    SwitchReason,
    SwitchPriority,
    OperationType 
} from '../src/types';
import { logger } from '../src/utils';

// –î–µ–º–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const demoConfig: AppConfig & { delayedSwitch: DelayedSwitchConfig } = {
    vpnConfigsPath: './configs',
    defaultVpnTimeout: 30000,
    maxReconnectAttempts: 3,
    healthCheckInterval: 30000,
    healthCheckUrl: 'https://httpbin.org/ip',
    healthCheckTimeout: 10000,
    httpTimeout: 15000,
    userAgent: 'PaliVPN-DelayedSwitching-Demo/1.0',
    logLevel: 'info',
    nodeEnv: 'development',
    delayedSwitch: {
        enabled: true,
        maxDelayMs: 60000, // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ 60 —Å–µ–∫—É–Ω–¥
        criticalityThresholds: {
            immediate: 90,    // >= 90 - –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ
            fast: 70,        // 70-89 - –±—ã—Å—Ç—Ä–æ (1-5 —Å–µ–∫)
            normal: 50,      // 50-69 - –æ–±—ã—á–Ω–æ (5-30 —Å–µ–∫)
            slow: 30         // 30-49 - –º–µ–¥–ª–µ–Ω–Ω–æ (30+ —Å–µ–∫)
        },
        gracePeriodMs: 10000 // 10 —Å–µ–∫—É–Ω–¥ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
    },
    vpnConfigs: [
        {
            name: 'primary-vpn',
            config: './configs/primary.ovpn',
            priority: 1,
            active: false,
            type: 'openvpn'
        },
        {
            name: 'backup-vpn',
            config: './configs/backup.ovpn',
            priority: 2,
            active: false,
            type: 'openvpn'
        },
        {
            name: 'emergency-vpn',
            config: './configs/emergency.ovpn',
            priority: 3,
            active: false,
            type: 'openvpn'
        }
    ]
};

/**
 * –°–∏–º—É–ª—è—Ü–∏—è –∫—Ä–∏—Ç–∏—á–Ω–æ–π —Ñ–∞–π–ª–æ–≤–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏
 */
async function simulateCriticalFileTransfer(
    manager: VPNManager,
    requester: VPNRequester,
    fileSize: number = 100
): Promise<string> {
    logger.info(`üóÇÔ∏è  Starting critical file transfer (${fileSize}MB)...`);
    
    // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é –∫–∞–∫ –∫—Ä–∏—Ç–∏—á–Ω—É—é
    const operationId = await manager.registerOperation({
        type: 'file_transfer',
        criticalityLevel: 85, // –í—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç–∏
        estimatedDuration: fileSize * 1000, // 1 —Å–µ–∫—É–Ω–¥–∞ –Ω–∞ MB
        canInterrupt: false, // –ù–µ–ª—å–∑—è –ø—Ä–µ—Ä—ã–≤–∞—Ç—å
        onComplete: () => logger.info('‚úÖ File transfer completed successfully'),
        onInterrupt: () => logger.warn('‚ö†Ô∏è  File transfer was interrupted!')
    });

    try {
        // –°–∏–º—É–ª–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Ñ–∞–π–ª–∞
        const transferStartTime = Date.now();
        let uploaded = 0;
        
        while (uploaded < fileSize) {
            const chunkSize = Math.min(10, fileSize - uploaded); // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ 10MB
            
            // –í—ã–ø–æ–ª–Ω—è–µ–º HTTP –∑–∞–ø—Ä–æ—Å –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —á–∞—Å—Ç–∏ —Ñ–∞–π–ª–∞
            await requester.post('https://httpbin.org/post', {
                chunk: uploaded / chunkSize,
                size: chunkSize,
                total: fileSize
            }, undefined, 'critical');
            
            uploaded += chunkSize;
            
            const progress = Math.round((uploaded / fileSize) * 100);
            logger.info(`üìä File transfer progress: ${progress}% (${uploaded}/${fileSize}MB)`);
            
            // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ—Å—Ç–∏
            await new Promise(resolve => setTimeout(resolve, 800));
        }
        
        const transferTime = Date.now() - transferStartTime;
        logger.info(`‚úÖ File transfer completed in ${transferTime}ms`);
        
        return operationId;
    } catch (error) {
        logger.error('‚ùå File transfer failed:', error);
        throw error;
    } finally {
        // –ó–∞–≤–µ—Ä—à–∞–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é
        await manager.completeOperation(operationId);
    }
}

/**
 * –°–∏–º—É–ª—è—Ü–∏—è –æ–±—ã—á–Ω—ã—Ö HTTP –∑–∞–ø—Ä–æ—Å–æ–≤
 */
async function simulateNormalTraffic(
    requester: VPNRequester,
    count: number = 5
): Promise<void> {
    logger.info(`üåê Starting normal HTTP traffic (${count} requests)...`);
    
    const promises = Array.from({ length: count }, async (_, i) => {
        try {
            const response = await requester.get(`https://httpbin.org/delay/${Math.floor(Math.random() * 3) + 1}`, 
                undefined, 'normal');
            logger.debug(`üì° Request ${i + 1} completed: ${response.status}`);
        } catch (error) {
            logger.warn(`üì° Request ${i + 1} failed:`, error);
        }
    });
    
    await Promise.all(promises);
    logger.info('‚úÖ Normal traffic completed');
}

/**
 * –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è
 */
async function runDelayedSwitchingDemo(): Promise<void> {
    logger.info('üöÄ Starting Delayed Switching Demo...\n');

    const manager = new VPNManager(demoConfig);
    const requester = new VPNRequester(demoConfig, manager);

    try {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        await manager.initialize();
        await manager.start();
        
        const targetVPN = demoConfig.vpnConfigs![1]!; // backup-vpn
        
        logger.info('üìä Initial delayed switch status:');
        console.log(JSON.stringify(manager.getDelayedSwitchStatus(), null, 2));

        // –°—Ü–µ–Ω–∞—Ä–∏–π 1: –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å –Ω–∏–∑–∫–æ–π –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç–∏ (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç–ª–æ–∂–µ–Ω–æ)
        logger.info('\nüîÑ SCENARIO 1: Low-priority switch (should be delayed)');
        
        const lowPrioritySwitch = await manager.requestDelayedSwitch(
            targetVPN,
            'optimization',
            'low',
            40 // –ù–∏–∑–∫–∏–π —É—Ä–æ–≤–µ–Ω—å –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç–∏
        );
        
        logger.info(`üìù Low-priority switch requested: ${lowPrioritySwitch}`);

        // –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—ã—á–Ω—ã–π —Ç—Ä–∞—Ñ–∏–∫
        const normalTrafficPromise = simulateNormalTraffic(requester, 3);

        // –°—Ü–µ–Ω–∞—Ä–∏–π 2: –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–æ –≤—Ä–µ–º—è –∫—Ä–∏—Ç–∏—á–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏
        logger.info('\nüîÑ SCENARIO 2: Switch during critical operation');
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –∫—Ä–∏—Ç–∏—á–Ω—É—é –æ–ø–µ—Ä–∞—Ü–∏—é
        const criticalOpPromise = simulateCriticalFileTransfer(manager, requester, 50);
        
        // –ü—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –≤–æ –≤—Ä–µ–º—è –∫—Ä–∏—Ç–∏—á–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏
        await new Promise(resolve => setTimeout(resolve, 2000)); // –ñ–¥–µ–º, –ø–æ–∫–∞ –æ–ø–µ—Ä–∞—Ü–∏—è –Ω–∞—á–Ω–µ—Ç—Å—è
        
        const criticalSwitch = await manager.requestDelayedSwitch(
            demoConfig.vpnConfigs![2]!, // emergency-vpn
            'user_request',
            'high',
            75 // –í—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç–∏
        );
        
        logger.info(`üìù High-priority switch requested during critical operation: ${criticalSwitch}`);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–≥–æ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è
        logger.info('\nüìä Status during critical operation:');
        const statusDuringOp = manager.getDelayedSwitchStatus();
        console.log(JSON.stringify(statusDuringOp, null, 2));

        // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∫—Ä–∏—Ç–∏—á–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏
        await criticalOpPromise;
        await normalTrafficPromise;

        // –°—Ü–µ–Ω–∞—Ä–∏–π 3: –≠–∫—Å—Ç—Ä–µ–Ω–Ω–æ–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ–º–µ–¥–ª–µ–Ω–Ω—ã–º)
        logger.info('\nüîÑ SCENARIO 3: Emergency switch (should be immediate)');
        
        const emergencySwitch = await manager.requestDelayedSwitch(
            targetVPN,
            'emergency',
            'emergency',
            95 // –≠–∫—Å—Ç—Ä–µ–Ω–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç–∏
        );
        
        logger.info(`üìù Emergency switch requested: ${emergencySwitch}`);

        // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        await new Promise(resolve => setTimeout(resolve, 5000));

        // –°—Ü–µ–Ω–∞—Ä–∏–π 4: –û—Ç–º–µ–Ω–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è
        logger.info('\nüîÑ SCENARIO 4: Switch cancellation');
        
        const cancelableSwitch = await manager.requestDelayedSwitch(
            demoConfig.vpnConfigs![0]!, // primary-vpn
            'maintenance',
            'low',
            35
        );
        
        logger.info(`üìù Cancelable switch requested: ${cancelableSwitch}`);
        
        // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –∏ –æ—Ç–º–µ–Ω—è–µ–º
        await new Promise(resolve => setTimeout(resolve, 2000));
        
        const cancelled = await manager.cancelDelayedSwitch(cancelableSwitch);
        logger.info(`üö´ Switch cancellation result: ${cancelled}`);

        // –§–∏–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å
        logger.info('\nüìä Final delayed switch status:');
        const finalStatus = manager.getDelayedSwitchStatus();
        console.log(JSON.stringify(finalStatus, null, 2));

        // –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ –Ω–µ–∫–æ—Ç–æ—Ä–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
        logger.info('\n‚è∞ Monitoring activity for 30 seconds...');
        
        const monitoringEnd = Date.now() + 30000;
        
        while (Date.now() < monitoringEnd) {
            const currentStatus = manager.getDelayedSwitchStatus();
            
            if (currentStatus.nextScheduledSwitch) {
                const timeUntil = Math.round(currentStatus.nextScheduledSwitch.timeUntilSwitch / 1000);
                logger.info(`‚è≥ Next switch to ${currentStatus.nextScheduledSwitch.targetVPN.name} in ${timeUntil}s`);
            }
            
            if (currentStatus.activeOperations.length > 0) {
                logger.info(`üîÑ Active operations: ${currentStatus.activeOperations.length}`);
            }
            
            await new Promise(resolve => setTimeout(resolve, 5000));
        }

    } catch (error) {
        logger.error('‚ùå Demo failed:', error);
    } finally {
        // Cleanup
        logger.info('\nüßπ Cleaning up...');
        await manager.stop();
        logger.info('‚úÖ Delayed Switching Demo completed');
    }
}

// –ó–∞–ø—É—Å–∫ –¥–µ–º–æ, –µ—Å–ª–∏ —Å–∫—Ä–∏–ø—Ç –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
    runDelayedSwitchingDemo().catch(error => {
        logger.error('Fatal error in delayed switching demo:', error);
        process.exit(1);
    });
}

export { runDelayedSwitchingDemo };
